CMP
---
    - IMM: CMP #01 (c9 01)                      # AC - 01
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: BI <- MEM[AB]; AI <- AC
        T3: AI - BI; wrn; wrz; wrc
    
    - Z-PAGE: CMP $33 (c5 33)                   # AC - MEM[33h]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: BI <- MEM[AB]; AI <- 0
        T3: ADL <- AI + BI; ADH <- 0;
        T4: BI <- MEM[AB]; AI <- AC
        T5: AI - BI; wrn; wrz; wrc  

    - Z-PAGE,X: CMP $13 (d5 13)                 # AC - MEM[13h+X]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
       
        T2: BI <- MEM[AB]; AI <- X
        T3: ADL <- AI + BI; ADH <- 0
        T4: BI <- MEM[AB]; AI <- AC
        T5: AI - BI; wrn; wrz; wrc
        
    - (IND,X): CMP ($36,X) (c1 36)              # AC - MEM[MEM[36h+X]]    OBS: O ENDEREÇO RESULTANTE DE (IND+X) FICA DENTRO DA PÁGINA 0 (00:FF)
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: BI <- MEM[AB]; AI <- X
        T3: ADL <- AI + BI; ADH <- 0                        # AB <- ZERO PAGE ADDRESS
        T4: ADL <- AI + BI + 1; BI <- MEM[AB]; AI <- 0;     # LÊ O LOW BYTE DO ENDEREÇO DO DADO EM BI; ADL TEM END. HIGH BYTE
        T5: ADL <- AI + BI; ADH <- MEM[AB]
        T6: BI <- MEM[AB]; AI <- AC
        T7: AI - BI; wrn; wrz; wrc
        
    - (IND),Y: CMP ($A5),Y (d1 a5)              # AC - MEM[MEM[a5h]+Y]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: BI <- MEM[AB]; AI <- 0
        T3: ADL <- AI + BI; ADH <- 0
        T4: ADL <- AI + BI + 1; BI <- MEM[AB]; AI <- Y      # LÊ LOW BYTE DO ENDEREÇO
        T5: ADL <- BI + AI; BI <- MEM[AB]; AI <- 0;    # LÊ O HIGH BYTE DO ENDEREÇO EM BI E SOMA Y AO LOW BYTE RECÉM LIDO
        T6: ADH <- AI + BI + hc
        T7: BI <- MEM[AB]; AI <- AC
        T8: AI - BI; wrn; wrz; wrc
        
    - ABS: CMP $0001 (cd 01 00)                 # AC - MEM[0001h]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: AB <- PC; PC++; BI <- MEM[AB]; AI <- 0
        T3: ADL <- AI + BI; ABH <- MEM[AB]
        T4: BI <- MEM[AB]; AI <- AC
        T5: AI - BI; wrn; wrz; wrc
        
    - ABS,X: CMP $12F0,X (dd F0 12)             # AC - MEM[12F0h+X]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: AB <- PC; PC++; BI <- MEM[AB]; AI <- X              # LÊ LOW BYTE DO END. BASE
        T3: ADL <- AI + BI; BI <- MEM[AB]; AI <- 0         # BI <- HIGH BYTE DA BASE
        T4: ADH <- AI + BI + hc
        T5: BI <- MEM[AB]; AI <- AC
        T6: AI - BI; wrn; wrz; wrc
        
    - ABS,Y: CMP $12F0,Y (d9 F0 12)             # AC - MEM[12F0h+Y]
        T0: AB <- PC; PC++; 
        T1: AB <- PC; PC++; IR <- MEM[AB]
        
        T2: AB <- PC; PC++; BI <- MEM[AB]; AI <- Y              # LÊ LOW BYTE DO END. BASE
        T3: ADL <- AI + BI; BI <- MEM[AB]; AI <- 0         # BI <- HIGH BYTE DA BASE
        T4: ADH <- AI + BI + hc
        T5: BI <- MEM[AB]; AI <- AC
        T6: AI - BI; wrn; wrz; wrc
        
        
Compare Instruction Results
    Compare Result	        N	Z	C
    A, X, or Y < Memory	    *	0	0
    A, X, or Y = Memory	    0	1	1
    A, X, or Y > Memory	    *	0	1
    * The N flag will be bit 7 of A, X, or Y - Memory
       
        
     