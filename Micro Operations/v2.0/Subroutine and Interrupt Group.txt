Brief: 
    - Addressing Modes: Absolute and Implied;
    - Lenght: 1 to 3 bytes;
    - Cycles: 6 to 8;
    
States shared between different addressing modes:

        ALL
        ----
            T0: MAR <- PC ;  PC++                           # Fetch  
            
Specific States:    
        
        JSR
        ---- 
            - ABS: JSR $0001 (20 01 00)         # PC <- 0001h; MEM[SP] <- PCH; SP--; MEM[SP] <- PCL; SP--;
                T1: MAR <- PC ; IR <- MEM[MAR] ; PC++;          # First Decode step, IR receives opcode    
                T2: BI <- MEM[MAR]; AI <- 0; ABL <- S; ABH <- 1; S--; # PC <- points to target's high address byte, MAR <- points to target's low address byte  
                T3: MEM[ABH/ABL] <- PCH; 
                T4: ABL <- S; ABH <- 1; S--; MEM[ABH/ABL] <- PCL;
                T5: PCL <- BI;  
                T6: PCH <- MEM[MAR]; 
                
        RTS
        ----
            - IMPLIED: RTS (60)                 # SP++; PCL <- MEM[SP]; SP++; PCH <- MEM[SP]
                T1: BI <- S; AI <- 0; IR <- MEM[MAR]
                T2: ABL <- AI + BI + 1; ABH <- 1; S <- AI + BI + 1
                T3: PCL <- MEM[ABH/ABL]; BI <- S; AI <- 0 
                T4: ABL <- AI + BI + 1; ABH <- 1; S <- AI + BI + 1
                T5: PCH <- MEM[ABH/ABL];
              * T6: PC++;
                
        RTI
        ----
            - IMPLIED: RTI (40)                 # SP++; P <- MEM[SP]; PCL <- MEM[SP]; SP++; PCH <- MEM[SP]
                T1: BI <- S; AI <- 0; IR <- MEM[MAR]
                T2: ABL <- AI + BI + 1; ABH <- 1; S <- AI + BI + 1
                T3: P <- MEM[ABH/ABL]; BI <- S; AI <- 0
                T4: ABL <- AI + BI + 1; ABH <- 1; S <- AI + BI + 1
                T5: PCL <- MEM[ABH/ABL]; BI <- S; AI <- 0 
                T6: ABL <- AI + BI + 1; ABH <- 1; S <- AI + BI + 1
                T7: PCH <- MEM[ABH/ABL];        
                
        BRK
        ----
            - IMPLIED: BRK (00)                 # Software Interruption
                T1: IR <- MEM[MAR]; PC++; ABL <- S; ABH <- 1; S-- 
                T2: MEM[ABH/ABL] <- PCH;                       
                T3: ABL <- S; ABH <- 1; S--; MEM[ABH/ABL] <- PCL; 
                T4: ABL <- S; ABH <- 1; S--; MEM[ABH/ABL] <- P;                
                T5: MAR <- x"FFFE"                   # Prepares address for next state
                T6: PCL <- MEM[MAR]; MAR <- x"FFFF"; # Interruption request handler
                T7: PCH <- MEM[MAR]; setB; 
                
                
       *It should be noted that the program counter low, which is now stored
     in the stack, is pointing at the last address in the JSR sequence.  This
     is not what would be expected as a result of a JSR instruction.  It would
     be expected that the stack points at the next instruction.  This apparent
     anomaly in the machine is corrected during the Return from Subroutine in-
     struction. (DO NOT INCREMENT PC AT T2!)
        Note:  At the end of the JSR instruction, the values on the stack con-
     tain the program counter low and the program counter high which referenced
     the last address of the JSR instruction.  Any subroutine calls which want
     to use the program Counter as an intermediate pointer must consider this
     fact.  It should be noted also that the Return from Subroutine instruction
     performs an automatic increment at the end of the RTS which means that any
     program Counters which are substituted on the stack must be 1 byte or 1
     pointer Count less than the program count to which the programmer expects
     the RTS to return. (RTS increments PC before running next instruction)