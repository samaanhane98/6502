use super::*;

#[test]
fn adc_test() {
    let mut processor = Processor::default();
    processor.regx = 1;
    processor.regy = 1;

    processor.load_program(Rc::new([
        (0x0000, 0x01),
        (0x0001, 0x01),
        (0x0002, 0x00),
        (0x0003, 0x01),
        (0x0004, 0xFF),
        (0x0005, 0x00),
        (0x0100, 0x01),
        (0x0200, 0x69),
        (0x0201, 0x01), // acc = 0x01
        (0x0202, 0x65),
        (0x0203, 0x00), // acc = 0x02
        (0x0204, 0x75),
        (0x0205, 0x00), // acc = 0x03
        (0x0206, 0x6D),
        (0x0207, 0x00),
        (0x0208, 0x01), // acc = 0x04
        (0x0209, 0x7D),
        (0x020A, 0xFF),
        (0x020B, 0x00), // acc = 0x05
        (0x020C, 0x79),
        (0x020D, 0xFF),
        (0x020E, 0x00), // acc = 0x06
        (0x020F, 0x61),
        (0x0210, 0x01), // acc = 0x07
        (0x0211, 0x71),
        (0x0212, 0x04), // acc = 0x08
    ]));

    for _ in 0..100 {
        processor.tick();
    }

    assert_eq!(processor.acc, 0x08);
}

#[test]
fn and_test() {
    let mut processor = Processor::default();
    processor.regx = 1;
    processor.regy = 1;

    processor.load_program(Rc::new([
        (0x0000, 0b0011_1111),
        (0x0001, 0b0001_1111),
        (0x0002, 0b0000_1111),
        (0x0003, 0b0000_0111),
        (0x0004, 0b0000_0011),
        (0x0005, 0x07),
        (0x0008, 0x00),
        (0x0009, 0x01),
        (0x0100, 0b0000_0001),
        (0x0101, 0b0000_0000),
        (0x0200, 0x69),
        (0x0201, 0xFF),
        (0x0202, 0x29),
        (0x0203, 0b0111_1111),
        (0x0204, 0x35),
        (0x0205, 0x00),
        (0x0206, 0x2D),
        (0x0207, 0x02),
        (0x0208, 0x00),
        (0x0209, 0x3D),
        (0x020A, 0x02),
        (0x020B, 0x00),
        (0x020C, 0x39),
        (0x020D, 0x03),
        (0x020E, 0x00),
        (0x020F, 0x21),
        (0x0210, 0x05),
        (0x0211, 0x31),
        (0x0212, 0x08),
    ]));

    for _ in 0..100 {
        processor.tick();
    }

    assert_eq!(processor.acc, 0b0000_0000);
}
